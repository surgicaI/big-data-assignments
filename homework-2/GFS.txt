SUMMARY: The Google File System
By, Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung

The paper explains how key observation of google application workloads and technological environment, both current and anticipated lead to formation of Google File System. It also talks about the underlying architecture, the design assumptions, the working of the system and the experience of using it. GFS supports old operation like create, delete, open, close, read, and write. It has additional operations like, snapshot which is used to create copy of a file or directory tree at low cost and record append which is useful for implementing multiway merge and producer-consumer queries that many client may simultaneously append. A cluster in GFS consists of a single master server and several chunkservers. Files are divided into fixed sized chunks with unique 64-bit handle and stored on chunkservers(mostly multiple for reliability). Each chunk replica is stored as Linux file on chunkservers and the chunk size is 64MB.  The master maintains all file system metadata. This includes the namespace, access control information, the mapping from files to chunks, and the current locations of chunks. All data bearing operations go directly to chunkservers to avoid bottlenecks due to single master. Neither the client nor the chunkservers caches file data and hence there are no cache coherence issues. The client sends a request with filename and chunk index to master and gets the chunk handle and location of replicas. The client then sends request to one of the replicas with chunk handle and no further client-master interaction is needed for any further read from the same file. Since applications mostly read and write large files sequentially hence large chunk size reduces the workload. Upon startup, the master builds up its memory structures by asking the chunkservers which chunks they contain, and by building up the file system state with a checkpoint/log system. This log system (operational log) is it the only persistent record of metadata and serves as a logical time line that defines the order of concurrent operations. The master also monitors chunckserver status with periodic heartbeat messages. The Google File System demonstrates the qualities essential for supporting large-scale data processing workloads on commodity hardware. This system provides high tolerance throughput.

BY: 
Simranjyot Singh Gill
